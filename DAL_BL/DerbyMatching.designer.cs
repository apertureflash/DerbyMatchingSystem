#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.530
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CockDerbyMatching_DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DerbyMatching")]
	public partial class DerbyMatchingDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDerby(Derby instance);
    partial void DeleteDerby(Derby instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertRooster(Rooster instance);
    partial void UpdateRooster(Rooster instance);
    partial void DeleteRooster(Rooster instance);
    partial void InsertNoFight(NoFight instance);
    partial void UpdateNoFight(NoFight instance);
    partial void DeleteNoFight(NoFight instance);
    partial void InsertFightSequence(FightSequence instance);
    partial void UpdateFightSequence(FightSequence instance);
    partial void DeleteFightSequence(FightSequence instance);
    partial void InsertHandPickedMatch(HandPickedMatch instance);
    partial void UpdateHandPickedMatch(HandPickedMatch instance);
    partial void DeleteHandPickedMatch(HandPickedMatch instance);
    partial void InsertHandler(Handler instance);
    partial void UpdateHandler(Handler instance);
    partial void DeleteHandler(Handler instance);
    partial void InsertEntry(Entry instance);
    partial void UpdateEntry(Entry instance);
    partial void DeleteEntry(Entry instance);
    #endregion
		
		public DerbyMatchingDataContext() :
        base("Data Source=WGITPI5-TDIAZ;Initial Catalog=DerbyMatching;Integrated Security=True", mappingSource)
		{
			OnCreated();
		}
		
		public DerbyMatchingDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DerbyMatchingDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DerbyMatchingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DerbyMatchingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Derby> Derbies
		{
			get
			{
				return this.GetTable<Derby>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<Rooster> Roosters
		{
			get
			{
				return this.GetTable<Rooster>();
			}
		}
		
		public System.Data.Linq.Table<NoFight> NoFights
		{
			get
			{
				return this.GetTable<NoFight>();
			}
		}
		
		public System.Data.Linq.Table<FightSequence> FightSequences
		{
			get
			{
				return this.GetTable<FightSequence>();
			}
		}
		
		public System.Data.Linq.Table<HandPickedMatch> HandPickedMatches
		{
			get
			{
				return this.GetTable<HandPickedMatch>();
			}
		}
		
		public System.Data.Linq.Table<Handler> Handlers
		{
			get
			{
				return this.GetTable<Handler>();
			}
		}
		
		public System.Data.Linq.Table<Entry> Entries
		{
			get
			{
				return this.GetTable<Entry>();
			}
		}
		
		private void UpdateDerby(Derby obj)
		{
			this.usp_UpdateDerbyInfo(((System.Nullable<int>)(obj.DerbyID)), ((System.Nullable<int>)(obj.LocationID)), obj.DerbyName, ((System.Nullable<System.DateTime>)(obj.DerbyDate)), ((System.Nullable<int>)(obj.NumberOfEntries)), obj.UpdatedBy);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_UpdateDerbyInfo")]
		public int usp_UpdateDerbyInfo([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DerbyID", DbType="Int")] System.Nullable<int> derbyID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LocationID", DbType="Int")] System.Nullable<int> locationID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DerbyName", DbType="NVarChar(200)")] string derbyName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DerbyDate", DbType="DateTime")] System.Nullable<System.DateTime> derbyDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NumberOfEntries", DbType="Int")] System.Nullable<int> numberOfEntries, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdatedBy", DbType="NVarChar(50)")] string updatedBy)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), derbyID, locationID, derbyName, derbyDate, numberOfEntries, updatedBy);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_DeleteEntry")]
		public int usp_DeleteEntry([global::System.Data.Linq.Mapping.ParameterAttribute(Name="EntryID", DbType="Int")] System.Nullable<int> entryID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), entryID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_ResetDerbyInfo")]
		public int usp_ResetDerbyInfo()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_CreateRoosterMatching")]
		public ISingleResult<FightSequence> usp_CreateRoosterMatching()
		{

		    try
		    {
		        IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo) (MethodInfo.GetCurrentMethod())));

		        return ((ISingleResult<FightSequence>) (result.ReturnValue));
		    }
		    catch
		    {
		        return null;
		    }
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Derbies")]
	public partial class Derby : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DerbyID;
		
		private System.Nullable<int> _LocationID;
		
		private string _DerbyName;
		
		private System.Nullable<DateTime> _DerbyDate;
		
		private int _NumberOfEntries;
		
		private System.DateTime _DateCreated;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _LastUpdated;
		
		private string _UpdatedBy;
		
		private EntitySet<FightSequence> _FightSequences;
		
		private EntitySet<Entry> _Entries;
		
		private EntityRef<Location> _Location;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDerbyIDChanging(int value);
    partial void OnDerbyIDChanged();
    partial void OnLocationIDChanging(System.Nullable<int> value);
    partial void OnLocationIDChanged();
    partial void OnDerbyNameChanging(string value);
    partial void OnDerbyNameChanged();
    partial void OnDerbyDateChanging(System.Nullable<DateTime> value);
    partial void OnDerbyDateChanged();
    partial void OnNumberOfEntriesChanging(int value);
    partial void OnNumberOfEntriesChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnLastUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdatedChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    #endregion
		
		public Derby()
		{
			this._FightSequences = new EntitySet<FightSequence>(new Action<FightSequence>(this.attach_FightSequences), new Action<FightSequence>(this.detach_FightSequences));
			this._Entries = new EntitySet<Entry>(new Action<Entry>(this.attach_Entries), new Action<Entry>(this.detach_Entries));
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DerbyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DerbyID
		{
			get
			{
				return this._DerbyID;
			}
			set
			{
				if ((this._DerbyID != value))
				{
					this.OnDerbyIDChanging(value);
					this.SendPropertyChanging();
					this._DerbyID = value;
					this.SendPropertyChanged("DerbyID");
					this.OnDerbyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int")]
		public System.Nullable<int> LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DerbyName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string DerbyName
		{
			get
			{
				return this._DerbyName;
			}
			set
			{
				if ((this._DerbyName != value))
				{
					this.OnDerbyNameChanging(value);
					this.SendPropertyChanging();
					this._DerbyName = value;
					this.SendPropertyChanged("DerbyName");
					this.OnDerbyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DerbyDate", DbType="DateTime NOT NULL")]
		public System.Nullable<DateTime> DerbyDate
		{
			get
			{
				return this._DerbyDate;
			}
			set
			{
				if ((this._DerbyDate != value))
				{
					this.OnDerbyDateChanging(value);
					this.SendPropertyChanging();
					this._DerbyDate = value;
					this.SendPropertyChanged("DerbyDate");
					this.OnDerbyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfEntries", DbType="Int NOT NULL")]
		public int NumberOfEntries
		{
			get
			{
				return this._NumberOfEntries;
			}
			set
			{
				if ((this._NumberOfEntries != value))
				{
					this.OnNumberOfEntriesChanging(value);
					this.SendPropertyChanging();
					this._NumberOfEntries = value;
					this.SendPropertyChanged("NumberOfEntries");
					this.OnNumberOfEntriesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="NVarChar(200)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Derby_FightSequence", Storage="_FightSequences", ThisKey="DerbyID", OtherKey="DerbyID")]
		public EntitySet<FightSequence> FightSequences
		{
			get
			{
				return this._FightSequences;
			}
			set
			{
				this._FightSequences.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Derby_Entry", Storage="_Entries", ThisKey="DerbyID", OtherKey="DerbyID")]
		public EntitySet<Entry> Entries
		{
			get
			{
				return this._Entries;
			}
			set
			{
				this._Entries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Derby", Storage="_Location", ThisKey="LocationID", OtherKey="LocationID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Derbies.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Derbies.Add(this);
						this._LocationID = value.LocationID;
					}
					else
					{
						this._LocationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FightSequences(FightSequence entity)
		{
			this.SendPropertyChanging();
			entity.Derby = this;
		}
		
		private void detach_FightSequences(FightSequence entity)
		{
			this.SendPropertyChanging();
			entity.Derby = null;
		}
		
		private void attach_Entries(Entry entity)
		{
			this.SendPropertyChanging();
			entity.Derby = this;
		}
		
		private void detach_Entries(Entry entity)
		{
			this.SendPropertyChanging();
			entity.Derby = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Locations")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationID;
		
		private string _LocationName;
		
		private System.DateTime _DateCreated;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _LastUpdated;
		
		private string _UpdatedBy;
		
		private EntitySet<Derby> _Derbies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnLocationNameChanging(string value);
    partial void OnLocationNameChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnLastUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdatedChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    #endregion
		
		public Location()
		{
			this._Derbies = new EntitySet<Derby>(new Action<Derby>(this.attach_Derbies), new Action<Derby>(this.detach_Derbies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string LocationName
		{
			get
			{
				return this._LocationName;
			}
			set
			{
				if ((this._LocationName != value))
				{
					this.OnLocationNameChanging(value);
					this.SendPropertyChanging();
					this._LocationName = value;
					this.SendPropertyChanged("LocationName");
					this.OnLocationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="NVarChar(50)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Derby", Storage="_Derbies", ThisKey="LocationID", OtherKey="LocationID")]
		public EntitySet<Derby> Derbies
		{
			get
			{
				return this._Derbies;
			}
			set
			{
				this._Derbies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Derbies(Derby entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Derbies(Derby entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roosters")]
	public partial class Rooster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoosterID;
		
		private string _RoosterLegBandNumber;
		
		private string _RoosterName;
		
		private decimal _RoosterWeight;
		
		private int _EntryID;
		
		private System.DateTime _DateCreated;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _LastUpdated;
		
		private string _UpdatedBy;
		
		private EntitySet<FightSequence> _FightSequences;
		
		private EntitySet<FightSequence> _FightSequences1;
		
		private EntityRef<Entry> _Entry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoosterIDChanging(int value);
    partial void OnRoosterIDChanged();
    partial void OnRoosterLegBandNumberChanging(string value);
    partial void OnRoosterLegBandNumberChanged();
    partial void OnRoosterNameChanging(string value);
    partial void OnRoosterNameChanged();
    partial void OnRoosterWeightChanging(decimal value);
    partial void OnRoosterWeightChanged();
    partial void OnEntryIDChanging(int value);
    partial void OnEntryIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnLastUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdatedChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    #endregion
		
		public Rooster()
		{
			this._FightSequences = new EntitySet<FightSequence>(new Action<FightSequence>(this.attach_FightSequences), new Action<FightSequence>(this.detach_FightSequences));
			this._FightSequences1 = new EntitySet<FightSequence>(new Action<FightSequence>(this.attach_FightSequences1), new Action<FightSequence>(this.detach_FightSequences1));
			this._Entry = default(EntityRef<Entry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoosterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoosterID
		{
			get
			{
				return this._RoosterID;
			}
			set
			{
				if ((this._RoosterID != value))
				{
					this.OnRoosterIDChanging(value);
					this.SendPropertyChanging();
					this._RoosterID = value;
					this.SendPropertyChanged("RoosterID");
					this.OnRoosterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoosterLegBandNumber", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string RoosterLegBandNumber
		{
			get
			{
				return this._RoosterLegBandNumber;
			}
			set
			{
				if ((this._RoosterLegBandNumber != value))
				{
					this.OnRoosterLegBandNumberChanging(value);
					this.SendPropertyChanging();
					this._RoosterLegBandNumber = value;
					this.SendPropertyChanged("RoosterLegBandNumber");
					this.OnRoosterLegBandNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoosterName", DbType="NVarChar(100) NOT NULL")]
		public string RoosterName
		{
			get
			{
				return this._RoosterName;
			}
			set
			{
				if ((this._RoosterName != value))
				{
					this.OnRoosterNameChanging(value);
					this.SendPropertyChanging();
					this._RoosterName = value;
					this.SendPropertyChanged("RoosterName");
					this.OnRoosterNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoosterWeight", DbType="Decimal(6,2) NOT NULL")]
		public decimal RoosterWeight
		{
			get
			{
				return this._RoosterWeight;
			}
			set
			{
				if ((this._RoosterWeight != value))
				{
					this.OnRoosterWeightChanging(value);
					this.SendPropertyChanging();
					this._RoosterWeight = value;
					this.SendPropertyChanged("RoosterWeight");
					this.OnRoosterWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryID", DbType="Int NOT NULL")]
		public int EntryID
		{
			get
			{
				return this._EntryID;
			}
			set
			{
				if ((this._EntryID != value))
				{
					if (this._Entry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntryIDChanging(value);
					this.SendPropertyChanging();
					this._EntryID = value;
					this.SendPropertyChanged("EntryID");
					this.OnEntryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="NVarChar(50)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rooster_FightSequence", Storage="_FightSequences", ThisKey="RoosterID", OtherKey="Rooster1ID")]
		public EntitySet<FightSequence> FightSequences
		{
			get
			{
				return this._FightSequences;
			}
			set
			{
				this._FightSequences.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rooster_FightSequence1", Storage="_FightSequences1", ThisKey="RoosterID", OtherKey="Rooster2ID")]
		public EntitySet<FightSequence> FightSequences1
		{
			get
			{
				return this._FightSequences1;
			}
			set
			{
				this._FightSequences1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entry_Rooster", Storage="_Entry", ThisKey="EntryID", OtherKey="EntryID", IsForeignKey=true)]
		public Entry Entry
		{
			get
			{
				return this._Entry.Entity;
			}
			set
			{
				Entry previousValue = this._Entry.Entity;
				if (((previousValue != value) 
							|| (this._Entry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entry.Entity = null;
						previousValue.Roosters.Remove(this);
					}
					this._Entry.Entity = value;
					if ((value != null))
					{
						value.Roosters.Add(this);
						this._EntryID = value.EntryID;
					}
					else
					{
						this._EntryID = default(int);
					}
					this.SendPropertyChanged("Entry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FightSequences(FightSequence entity)
		{
			this.SendPropertyChanging();
			entity.Rooster = this;
		}
		
		private void detach_FightSequences(FightSequence entity)
		{
			this.SendPropertyChanging();
			entity.Rooster = null;
		}
		
		private void attach_FightSequences1(FightSequence entity)
		{
			this.SendPropertyChanging();
			entity.Rooster1 = this;
		}
		
		private void detach_FightSequences1(FightSequence entity)
		{
			this.SendPropertyChanging();
			entity.Rooster1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NoFights")]
	public partial class NoFight : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NoFightID;
		
		private int _EntryID1;
		
		private int _EntryID2;
		
		private System.DateTime _DateCreated;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _LastUpdated;
		
		private string _UpdatedBy;
		
		private EntityRef<Entry> _Entry;
		
		private EntityRef<Entry> _Entry1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNoFightIDChanging(int value);
    partial void OnNoFightIDChanged();
    partial void OnEntryID1Changing(int value);
    partial void OnEntryID1Changed();
    partial void OnEntryID2Changing(int value);
    partial void OnEntryID2Changed();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnLastUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdatedChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    #endregion
		
		public NoFight()
		{
			this._Entry = default(EntityRef<Entry>);
			this._Entry1 = default(EntityRef<Entry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoFightID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NoFightID
		{
			get
			{
				return this._NoFightID;
			}
			set
			{
				if ((this._NoFightID != value))
				{
					this.OnNoFightIDChanging(value);
					this.SendPropertyChanging();
					this._NoFightID = value;
					this.SendPropertyChanged("NoFightID");
					this.OnNoFightIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryID1", DbType="Int NOT NULL")]
		public int EntryID1
		{
			get
			{
				return this._EntryID1;
			}
			set
			{
				if ((this._EntryID1 != value))
				{
					if (this._Entry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntryID1Changing(value);
					this.SendPropertyChanging();
					this._EntryID1 = value;
					this.SendPropertyChanged("EntryID1");
					this.OnEntryID1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryID2", DbType="Int NOT NULL")]
		public int EntryID2
		{
			get
			{
				return this._EntryID2;
			}
			set
			{
				if ((this._EntryID2 != value))
				{
					if (this._Entry1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntryID2Changing(value);
					this.SendPropertyChanging();
					this._EntryID2 = value;
					this.SendPropertyChanged("EntryID2");
					this.OnEntryID2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="NVarChar(50)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entry_NoFight", Storage="_Entry", ThisKey="EntryID1", OtherKey="EntryID", IsForeignKey=true)]
		public Entry Entry
		{
			get
			{
				return this._Entry.Entity;
			}
			set
			{
				Entry previousValue = this._Entry.Entity;
				if (((previousValue != value) 
							|| (this._Entry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entry.Entity = null;
						previousValue.NoFights.Remove(this);
					}
					this._Entry.Entity = value;
					if ((value != null))
					{
						value.NoFights.Add(this);
						this._EntryID1 = value.EntryID;
					}
					else
					{
						this._EntryID1 = default(int);
					}
					this.SendPropertyChanged("Entry");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entry_NoFight1", Storage="_Entry1", ThisKey="EntryID2", OtherKey="EntryID", IsForeignKey=true)]
		public Entry Entry1
		{
			get
			{
				return this._Entry1.Entity;
			}
			set
			{
				Entry previousValue = this._Entry1.Entity;
				if (((previousValue != value) 
							|| (this._Entry1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entry1.Entity = null;
						previousValue.NoFights1.Remove(this);
					}
					this._Entry1.Entity = value;
					if ((value != null))
					{
						value.NoFights1.Add(this);
						this._EntryID2 = value.EntryID;
					}
					else
					{
						this._EntryID2 = default(int);
					}
					this.SendPropertyChanged("Entry1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FightSequences")]
	public partial class FightSequence : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SequenceID;
		
		private int _DerbyID;
		
		private int? _FightNumber;
		
		private int _Rooster1EntryNumber;
		
		private string _Rooster1Entry;
		
		private int _Rooster1ID;
		
		private string _Rooster1LB;
		
		private decimal _Rooster1Weight;
		
		private int _Rooster2EntryNumber;
		
		private string _Rooster2Entry;
		
		private int _Rooster2ID;
		
		private string _Rooster2LB;
		
		private decimal _Rooster2Weight;
		
		private System.DateTime _DateCreated;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _LastUpdated;
		
		private string _UpdatedBy;
		
		private EntityRef<Derby> _Derby;
		
		private EntityRef<Rooster> _Rooster;
		
		private EntityRef<Rooster> _Rooster1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSequenceIDChanging(int value);
    partial void OnSequenceIDChanged();
    partial void OnDerbyIDChanging(int value);
    partial void OnDerbyIDChanged();
    partial void OnFightNumberChanging(int? value);
    partial void OnFightNumberChanged();
    partial void OnRooster1EntryNumberChanging(int value);
    partial void OnRooster1EntryNumberChanged();
    partial void OnRooster1EntryChanging(string value);
    partial void OnRooster1EntryChanged();
    partial void OnRooster1IDChanging(int value);
    partial void OnRooster1IDChanged();
    partial void OnRooster1LBChanging(string value);
    partial void OnRooster1LBChanged();
    partial void OnRooster1WeightChanging(decimal value);
    partial void OnRooster1WeightChanged();
    partial void OnRooster2EntryNumberChanging(int value);
    partial void OnRooster2EntryNumberChanged();
    partial void OnRooster2EntryChanging(string value);
    partial void OnRooster2EntryChanged();
    partial void OnRooster2IDChanging(int value);
    partial void OnRooster2IDChanged();
    partial void OnRooster2LBChanging(string value);
    partial void OnRooster2LBChanged();
    partial void OnRooster2WeightChanging(decimal value);
    partial void OnRooster2WeightChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnLastUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdatedChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    #endregion
		
		public FightSequence()
		{
			this._Derby = default(EntityRef<Derby>);
			this._Rooster = default(EntityRef<Rooster>);
			this._Rooster1 = default(EntityRef<Rooster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SequenceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SequenceID
		{
			get
			{
				return this._SequenceID;
			}
			set
			{
				if ((this._SequenceID != value))
				{
					this.OnSequenceIDChanging(value);
					this.SendPropertyChanging();
					this._SequenceID = value;
					this.SendPropertyChanged("SequenceID");
					this.OnSequenceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DerbyID", DbType="Int NOT NULL")]
		public int DerbyID
		{
			get
			{
				return this._DerbyID;
			}
			set
			{
				if ((this._DerbyID != value))
				{
					if (this._Derby.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDerbyIDChanging(value);
					this.SendPropertyChanging();
					this._DerbyID = value;
					this.SendPropertyChanged("DerbyID");
					this.OnDerbyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FightNumber", DbType="Int NOT NULL")]
		public int? FightNumber
		{
			get
			{
				return this._FightNumber;
			}
			set
			{
				if ((this._FightNumber != value))
				{
					this.OnFightNumberChanging(value);
					this.SendPropertyChanging();
					this._FightNumber = value;
					this.SendPropertyChanged("FightNumber");
					this.OnFightNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster1EntryNumber", DbType="Int NOT NULL")]
		public int Rooster1EntryNumber
		{
			get
			{
				return this._Rooster1EntryNumber;
			}
			set
			{
				if ((this._Rooster1EntryNumber != value))
				{
					this.OnRooster1EntryNumberChanging(value);
					this.SendPropertyChanging();
					this._Rooster1EntryNumber = value;
					this.SendPropertyChanged("Rooster1EntryNumber");
					this.OnRooster1EntryNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster1Entry", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Rooster1Entry
		{
			get
			{
				return this._Rooster1Entry;
			}
			set
			{
				if ((this._Rooster1Entry != value))
				{
					this.OnRooster1EntryChanging(value);
					this.SendPropertyChanging();
					this._Rooster1Entry = value;
					this.SendPropertyChanged("Rooster1Entry");
					this.OnRooster1EntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster1ID", DbType="Int NOT NULL")]
		public int Rooster1ID
		{
			get
			{
				return this._Rooster1ID;
			}
			set
			{
				if ((this._Rooster1ID != value))
				{
					if (this._Rooster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRooster1IDChanging(value);
					this.SendPropertyChanging();
					this._Rooster1ID = value;
					this.SendPropertyChanged("Rooster1ID");
					this.OnRooster1IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster1LB", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Rooster1LB
		{
			get
			{
				return this._Rooster1LB;
			}
			set
			{
				if ((this._Rooster1LB != value))
				{
					this.OnRooster1LBChanging(value);
					this.SendPropertyChanging();
					this._Rooster1LB = value;
					this.SendPropertyChanged("Rooster1LB");
					this.OnRooster1LBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster1Weight", DbType="Decimal(6,2) NOT NULL")]
		public decimal Rooster1Weight
		{
			get
			{
				return this._Rooster1Weight;
			}
			set
			{
				if ((this._Rooster1Weight != value))
				{
					this.OnRooster1WeightChanging(value);
					this.SendPropertyChanging();
					this._Rooster1Weight = value;
					this.SendPropertyChanged("Rooster1Weight");
					this.OnRooster1WeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster2EntryNumber", DbType="Int NOT NULL")]
		public int Rooster2EntryNumber
		{
			get
			{
				return this._Rooster2EntryNumber;
			}
			set
			{
				if ((this._Rooster2EntryNumber != value))
				{
					this.OnRooster2EntryNumberChanging(value);
					this.SendPropertyChanging();
					this._Rooster2EntryNumber = value;
					this.SendPropertyChanged("Rooster2EntryNumber");
					this.OnRooster2EntryNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster2Entry", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Rooster2Entry
		{
			get
			{
				return this._Rooster2Entry;
			}
			set
			{
				if ((this._Rooster2Entry != value))
				{
					this.OnRooster2EntryChanging(value);
					this.SendPropertyChanging();
					this._Rooster2Entry = value;
					this.SendPropertyChanged("Rooster2Entry");
					this.OnRooster2EntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster2ID", DbType="Int NOT NULL")]
		public int Rooster2ID
		{
			get
			{
				return this._Rooster2ID;
			}
			set
			{
				if ((this._Rooster2ID != value))
				{
					if (this._Rooster1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRooster2IDChanging(value);
					this.SendPropertyChanging();
					this._Rooster2ID = value;
					this.SendPropertyChanged("Rooster2ID");
					this.OnRooster2IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster2LB", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Rooster2LB
		{
			get
			{
				return this._Rooster2LB;
			}
			set
			{
				if ((this._Rooster2LB != value))
				{
					this.OnRooster2LBChanging(value);
					this.SendPropertyChanging();
					this._Rooster2LB = value;
					this.SendPropertyChanged("Rooster2LB");
					this.OnRooster2LBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster2Weight", DbType="Decimal(6,2) NOT NULL")]
		public decimal Rooster2Weight
		{
			get
			{
				return this._Rooster2Weight;
			}
			set
			{
				if ((this._Rooster2Weight != value))
				{
					this.OnRooster2WeightChanging(value);
					this.SendPropertyChanging();
					this._Rooster2Weight = value;
					this.SendPropertyChanged("Rooster2Weight");
					this.OnRooster2WeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="NVarChar(200)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Derby_FightSequence", Storage="_Derby", ThisKey="DerbyID", OtherKey="DerbyID", IsForeignKey=true)]
		public Derby Derby
		{
			get
			{
				return this._Derby.Entity;
			}
			set
			{
				Derby previousValue = this._Derby.Entity;
				if (((previousValue != value) 
							|| (this._Derby.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Derby.Entity = null;
						previousValue.FightSequences.Remove(this);
					}
					this._Derby.Entity = value;
					if ((value != null))
					{
						value.FightSequences.Add(this);
						this._DerbyID = value.DerbyID;
					}
					else
					{
						this._DerbyID = default(int);
					}
					this.SendPropertyChanged("Derby");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rooster_FightSequence", Storage="_Rooster", ThisKey="Rooster1ID", OtherKey="RoosterID", IsForeignKey=true)]
		public Rooster Rooster
		{
			get
			{
				return this._Rooster.Entity;
			}
			set
			{
				Rooster previousValue = this._Rooster.Entity;
				if (((previousValue != value) 
							|| (this._Rooster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rooster.Entity = null;
						previousValue.FightSequences.Remove(this);
					}
					this._Rooster.Entity = value;
					if ((value != null))
					{
						value.FightSequences.Add(this);
						this._Rooster1ID = value.RoosterID;
					}
					else
					{
						this._Rooster1ID = default(int);
					}
					this.SendPropertyChanged("Rooster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rooster_FightSequence1", Storage="_Rooster1", ThisKey="Rooster2ID", OtherKey="RoosterID", IsForeignKey=true)]
		public Rooster Rooster1
		{
			get
			{
				return this._Rooster1.Entity;
			}
			set
			{
				Rooster previousValue = this._Rooster1.Entity;
				if (((previousValue != value) 
							|| (this._Rooster1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rooster1.Entity = null;
						previousValue.FightSequences1.Remove(this);
					}
					this._Rooster1.Entity = value;
					if ((value != null))
					{
						value.FightSequences1.Add(this);
						this._Rooster2ID = value.RoosterID;
					}
					else
					{
						this._Rooster2ID = default(int);
					}
					this.SendPropertyChanged("Rooster1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HandPickedMatches")]
	public partial class HandPickedMatch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MatchUpID;
		
		private int _DerbyID;
		
		private int _Rooster1ID;
		
		private string _Rooster1LB;
		
		private int _Rooster1EntryNumber;
		
		private string _Rooster1Entry;
		
		private decimal _Rooster1Weight;
		
		private int _Rooster2ID;
		
		private string _Rooster2LB;
		
		private int _Rooster2EntryNumber;
		
		private string _Rooster2Entry;
		
		private decimal _Rooster2Weight;
		
		private System.DateTime _DateCreated;
		
		private string _CreateBy;
		
		private System.Nullable<System.DateTime> _LastUpdated;
		
		private string _UpdatedBy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchUpIDChanging(int value);
    partial void OnMatchUpIDChanged();
    partial void OnDerbyIDChanging(int value);
    partial void OnDerbyIDChanged();
    partial void OnRooster1IDChanging(int value);
    partial void OnRooster1IDChanged();
    partial void OnRooster1LBChanging(string value);
    partial void OnRooster1LBChanged();
    partial void OnRooster1EntryNumberChanging(int value);
    partial void OnRooster1EntryNumberChanged();
    partial void OnRooster1EntryChanging(string value);
    partial void OnRooster1EntryChanged();
    partial void OnRooster1WeightChanging(decimal value);
    partial void OnRooster1WeightChanged();
    partial void OnRooster2IDChanging(int value);
    partial void OnRooster2IDChanged();
    partial void OnRooster2LBChanging(string value);
    partial void OnRooster2LBChanged();
    partial void OnRooster2EntryNumberChanging(int value);
    partial void OnRooster2EntryNumberChanged();
    partial void OnRooster2EntryChanging(string value);
    partial void OnRooster2EntryChanged();
    partial void OnRooster2WeightChanging(decimal value);
    partial void OnRooster2WeightChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnCreateByChanging(string value);
    partial void OnCreateByChanged();
    partial void OnLastUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdatedChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    #endregion
		
		public HandPickedMatch()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchUpID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MatchUpID
		{
			get
			{
				return this._MatchUpID;
			}
			set
			{
				if ((this._MatchUpID != value))
				{
					this.OnMatchUpIDChanging(value);
					this.SendPropertyChanging();
					this._MatchUpID = value;
					this.SendPropertyChanged("MatchUpID");
					this.OnMatchUpIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DerbyID", DbType="Int NOT NULL")]
		public int DerbyID
		{
			get
			{
				return this._DerbyID;
			}
			set
			{
				if ((this._DerbyID != value))
				{
					this.OnDerbyIDChanging(value);
					this.SendPropertyChanging();
					this._DerbyID = value;
					this.SendPropertyChanged("DerbyID");
					this.OnDerbyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster1ID", DbType="Int NOT NULL")]
		public int Rooster1ID
		{
			get
			{
				return this._Rooster1ID;
			}
			set
			{
				if ((this._Rooster1ID != value))
				{
					this.OnRooster1IDChanging(value);
					this.SendPropertyChanging();
					this._Rooster1ID = value;
					this.SendPropertyChanged("Rooster1ID");
					this.OnRooster1IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster1LB", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Rooster1LB
		{
			get
			{
				return this._Rooster1LB;
			}
			set
			{
				if ((this._Rooster1LB != value))
				{
					this.OnRooster1LBChanging(value);
					this.SendPropertyChanging();
					this._Rooster1LB = value;
					this.SendPropertyChanged("Rooster1LB");
					this.OnRooster1LBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster1EntryNumber", DbType="Int NOT NULL")]
		public int Rooster1EntryNumber
		{
			get
			{
				return this._Rooster1EntryNumber;
			}
			set
			{
				if ((this._Rooster1EntryNumber != value))
				{
					this.OnRooster1EntryNumberChanging(value);
					this.SendPropertyChanging();
					this._Rooster1EntryNumber = value;
					this.SendPropertyChanged("Rooster1EntryNumber");
					this.OnRooster1EntryNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster1Entry", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Rooster1Entry
		{
			get
			{
				return this._Rooster1Entry;
			}
			set
			{
				if ((this._Rooster1Entry != value))
				{
					this.OnRooster1EntryChanging(value);
					this.SendPropertyChanging();
					this._Rooster1Entry = value;
					this.SendPropertyChanged("Rooster1Entry");
					this.OnRooster1EntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster1Weight", DbType="Decimal(6,2) NOT NULL")]
		public decimal Rooster1Weight
		{
			get
			{
				return this._Rooster1Weight;
			}
			set
			{
				if ((this._Rooster1Weight != value))
				{
					this.OnRooster1WeightChanging(value);
					this.SendPropertyChanging();
					this._Rooster1Weight = value;
					this.SendPropertyChanged("Rooster1Weight");
					this.OnRooster1WeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster2ID", DbType="Int NOT NULL")]
		public int Rooster2ID
		{
			get
			{
				return this._Rooster2ID;
			}
			set
			{
				if ((this._Rooster2ID != value))
				{
					this.OnRooster2IDChanging(value);
					this.SendPropertyChanging();
					this._Rooster2ID = value;
					this.SendPropertyChanged("Rooster2ID");
					this.OnRooster2IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster2LB", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Rooster2LB
		{
			get
			{
				return this._Rooster2LB;
			}
			set
			{
				if ((this._Rooster2LB != value))
				{
					this.OnRooster2LBChanging(value);
					this.SendPropertyChanging();
					this._Rooster2LB = value;
					this.SendPropertyChanged("Rooster2LB");
					this.OnRooster2LBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster2EntryNumber", DbType="Int NOT NULL")]
		public int Rooster2EntryNumber
		{
			get
			{
				return this._Rooster2EntryNumber;
			}
			set
			{
				if ((this._Rooster2EntryNumber != value))
				{
					this.OnRooster2EntryNumberChanging(value);
					this.SendPropertyChanging();
					this._Rooster2EntryNumber = value;
					this.SendPropertyChanged("Rooster2EntryNumber");
					this.OnRooster2EntryNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster2Entry", DbType="NVarChar(200)")]
		public string Rooster2Entry
		{
			get
			{
				return this._Rooster2Entry;
			}
			set
			{
				if ((this._Rooster2Entry != value))
				{
					this.OnRooster2EntryChanging(value);
					this.SendPropertyChanging();
					this._Rooster2Entry = value;
					this.SendPropertyChanged("Rooster2Entry");
					this.OnRooster2EntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster2Weight", DbType="Decimal(6,2) NOT NULL")]
		public decimal Rooster2Weight
		{
			get
			{
				return this._Rooster2Weight;
			}
			set
			{
				if ((this._Rooster2Weight != value))
				{
					this.OnRooster2WeightChanging(value);
					this.SendPropertyChanging();
					this._Rooster2Weight = value;
					this.SendPropertyChanged("Rooster2Weight");
					this.OnRooster2WeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CreateBy
		{
			get
			{
				return this._CreateBy;
			}
			set
			{
				if ((this._CreateBy != value))
				{
					this.OnCreateByChanging(value);
					this.SendPropertyChanging();
					this._CreateBy = value;
					this.SendPropertyChanged("CreateBy");
					this.OnCreateByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="NVarChar(50)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Handlers")]
	public partial class Handler : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HandlerID;
		
		private string _HandlerName;
		
		private System.DateTime _DateCreated;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _LastUpdated;
		
		private string _UpdatedBy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHandlerIDChanging(int value);
    partial void OnHandlerIDChanged();
    partial void OnHandlerNameChanging(string value);
    partial void OnHandlerNameChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnLastUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdatedChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    #endregion
		
		public Handler()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HandlerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HandlerID
		{
			get
			{
				return this._HandlerID;
			}
			set
			{
				if ((this._HandlerID != value))
				{
					this.OnHandlerIDChanging(value);
					this.SendPropertyChanging();
					this._HandlerID = value;
					this.SendPropertyChanged("HandlerID");
					this.OnHandlerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HandlerName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string HandlerName
		{
			get
			{
				return this._HandlerName;
			}
			set
			{
				if ((this._HandlerName != value))
				{
					this.OnHandlerNameChanging(value);
					this.SendPropertyChanging();
					this._HandlerName = value;
					this.SendPropertyChanged("HandlerName");
					this.OnHandlerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="NVarChar(50)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Entries")]
	public partial class Entry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EntryID;
		
		private int _DerbyID;
		
		private System.Nullable<int> _HandlerID;
		
		private int _EntryNumber;
		
		private string _EntryName;
		
		private System.DateTime _DateCreated;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _LastUpdated;
		
		private string _UpdatedBy;
		
		private EntitySet<Rooster> _Roosters;
		
		private EntitySet<NoFight> _NoFights;
		
		private EntitySet<NoFight> _NoFights1;
		
		private EntityRef<Derby> _Derby;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntryIDChanging(int value);
    partial void OnEntryIDChanged();
    partial void OnDerbyIDChanging(int value);
    partial void OnDerbyIDChanged();
    partial void OnHandlerIDChanging(System.Nullable<int> value);
    partial void OnHandlerIDChanged();
    partial void OnEntryNumberChanging(int value);
    partial void OnEntryNumberChanged();
    partial void OnEntryNameChanging(string value);
    partial void OnEntryNameChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnLastUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdatedChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    #endregion
		
		public Entry()
		{
			this._Roosters = new EntitySet<Rooster>(new Action<Rooster>(this.attach_Roosters), new Action<Rooster>(this.detach_Roosters));
			this._NoFights = new EntitySet<NoFight>(new Action<NoFight>(this.attach_NoFights), new Action<NoFight>(this.detach_NoFights));
			this._NoFights1 = new EntitySet<NoFight>(new Action<NoFight>(this.attach_NoFights1), new Action<NoFight>(this.detach_NoFights1));
			this._Derby = default(EntityRef<Derby>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EntryID
		{
			get
			{
				return this._EntryID;
			}
			set
			{
				if ((this._EntryID != value))
				{
					this.OnEntryIDChanging(value);
					this.SendPropertyChanging();
					this._EntryID = value;
					this.SendPropertyChanged("EntryID");
					this.OnEntryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DerbyID", DbType="Int NOT NULL")]
		public int DerbyID
		{
			get
			{
				return this._DerbyID;
			}
			set
			{
				if ((this._DerbyID != value))
				{
					if (this._Derby.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDerbyIDChanging(value);
					this.SendPropertyChanging();
					this._DerbyID = value;
					this.SendPropertyChanged("DerbyID");
					this.OnDerbyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HandlerID", DbType="Int")]
		public System.Nullable<int> HandlerID
		{
			get
			{
				return this._HandlerID;
			}
			set
			{
				if ((this._HandlerID != value))
				{
					this.OnHandlerIDChanging(value);
					this.SendPropertyChanging();
					this._HandlerID = value;
					this.SendPropertyChanged("HandlerID");
					this.OnHandlerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryNumber", DbType="Int NOT NULL")]
		public int EntryNumber
		{
			get
			{
				return this._EntryNumber;
			}
			set
			{
				if ((this._EntryNumber != value))
				{
					this.OnEntryNumberChanging(value);
					this.SendPropertyChanging();
					this._EntryNumber = value;
					this.SendPropertyChanged("EntryNumber");
					this.OnEntryNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string EntryName
		{
			get
			{
				return this._EntryName;
			}
			set
			{
				if ((this._EntryName != value))
				{
					this.OnEntryNameChanging(value);
					this.SendPropertyChanging();
					this._EntryName = value;
					this.SendPropertyChanged("EntryName");
					this.OnEntryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="NVarChar(50)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entry_Rooster", Storage="_Roosters", ThisKey="EntryID", OtherKey="EntryID")]
		public EntitySet<Rooster> Roosters
		{
			get
			{
				return this._Roosters;
			}
			set
			{
				this._Roosters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entry_NoFight", Storage="_NoFights", ThisKey="EntryID", OtherKey="EntryID1")]
		public EntitySet<NoFight> NoFights
		{
			get
			{
				return this._NoFights;
			}
			set
			{
				this._NoFights.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entry_NoFight1", Storage="_NoFights1", ThisKey="EntryID", OtherKey="EntryID2")]
		public EntitySet<NoFight> NoFights1
		{
			get
			{
				return this._NoFights1;
			}
			set
			{
				this._NoFights1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Derby_Entry", Storage="_Derby", ThisKey="DerbyID", OtherKey="DerbyID", IsForeignKey=true)]
		public Derby Derby
		{
			get
			{
				return this._Derby.Entity;
			}
			set
			{
				Derby previousValue = this._Derby.Entity;
				if (((previousValue != value) 
							|| (this._Derby.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Derby.Entity = null;
						previousValue.Entries.Remove(this);
					}
					this._Derby.Entity = value;
					if ((value != null))
					{
						value.Entries.Add(this);
						this._DerbyID = value.DerbyID;
					}
					else
					{
						this._DerbyID = default(int);
					}
					this.SendPropertyChanged("Derby");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Roosters(Rooster entity)
		{
			this.SendPropertyChanging();
			entity.Entry = this;
		}
		
		private void detach_Roosters(Rooster entity)
		{
			this.SendPropertyChanging();
			entity.Entry = null;
		}
		
		private void attach_NoFights(NoFight entity)
		{
			this.SendPropertyChanging();
			entity.Entry = this;
		}
		
		private void detach_NoFights(NoFight entity)
		{
			this.SendPropertyChanging();
			entity.Entry = null;
		}
		
		private void attach_NoFights1(NoFight entity)
		{
			this.SendPropertyChanging();
			entity.Entry1 = this;
		}
		
		private void detach_NoFights1(NoFight entity)
		{
			this.SendPropertyChanging();
			entity.Entry1 = null;
		}
	}
	
	public partial class usp_CreateRoosterMatchingResult
	{
		
		private int _SequenceID;
		
		private int _DerbyID;
		
		private int _FightNumber;
		
		private int _Rooster1EntryNumber;
		
		private string _Rooster1Entry;
		
		private int _Rooster1ID;
		
		private string _Rooster1LB;
		
		private decimal _Rooster1Weight;
		
		private int _Rooster2EntryNumber;
		
		private string _Rooster2Entry;
		
		private int _Rooster2ID;
		
		private string _Rooster2LB;
		
		private decimal _Rooster2Weight;
		
		private System.DateTime _DateCreated;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _LastUpdated;
		
		private string _UpdatedBy;
		
		public usp_CreateRoosterMatchingResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SequenceID", DbType="Int NOT NULL")]
		public int SequenceID
		{
			get
			{
				return this._SequenceID;
			}
			set
			{
				if ((this._SequenceID != value))
				{
					this._SequenceID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DerbyID", DbType="Int NOT NULL")]
		public int DerbyID
		{
			get
			{
				return this._DerbyID;
			}
			set
			{
				if ((this._DerbyID != value))
				{
					this._DerbyID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FightNumber", DbType="Int NOT NULL")]
		public int FightNumber
		{
			get
			{
				return this._FightNumber;
			}
			set
			{
				if ((this._FightNumber != value))
				{
					this._FightNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster1EntryNumber", DbType="Int NOT NULL")]
		public int Rooster1EntryNumber
		{
			get
			{
				return this._Rooster1EntryNumber;
			}
			set
			{
				if ((this._Rooster1EntryNumber != value))
				{
					this._Rooster1EntryNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster1Entry", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Rooster1Entry
		{
			get
			{
				return this._Rooster1Entry;
			}
			set
			{
				if ((this._Rooster1Entry != value))
				{
					this._Rooster1Entry = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster1ID", DbType="Int NOT NULL")]
		public int Rooster1ID
		{
			get
			{
				return this._Rooster1ID;
			}
			set
			{
				if ((this._Rooster1ID != value))
				{
					this._Rooster1ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster1LB", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Rooster1LB
		{
			get
			{
				return this._Rooster1LB;
			}
			set
			{
				if ((this._Rooster1LB != value))
				{
					this._Rooster1LB = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster1Weight", DbType="Decimal(6,2) NOT NULL")]
		public decimal Rooster1Weight
		{
			get
			{
				return this._Rooster1Weight;
			}
			set
			{
				if ((this._Rooster1Weight != value))
				{
					this._Rooster1Weight = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster2EntryNumber", DbType="Int NOT NULL")]
		public int Rooster2EntryNumber
		{
			get
			{
				return this._Rooster2EntryNumber;
			}
			set
			{
				if ((this._Rooster2EntryNumber != value))
				{
					this._Rooster2EntryNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster2Entry", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Rooster2Entry
		{
			get
			{
				return this._Rooster2Entry;
			}
			set
			{
				if ((this._Rooster2Entry != value))
				{
					this._Rooster2Entry = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster2ID", DbType="Int NOT NULL")]
		public int Rooster2ID
		{
			get
			{
				return this._Rooster2ID;
			}
			set
			{
				if ((this._Rooster2ID != value))
				{
					this._Rooster2ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster2LB", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Rooster2LB
		{
			get
			{
				return this._Rooster2LB;
			}
			set
			{
				if ((this._Rooster2LB != value))
				{
					this._Rooster2LB = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rooster2Weight", DbType="Decimal(6,2) NOT NULL")]
		public decimal Rooster2Weight
		{
			get
			{
				return this._Rooster2Weight;
			}
			set
			{
				if ((this._Rooster2Weight != value))
				{
					this._Rooster2Weight = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this._DateCreated = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this._CreatedBy = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this._LastUpdated = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="NVarChar(200)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this._UpdatedBy = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
